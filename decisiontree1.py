# -*- coding: utf-8 -*-
"""ML-HW1-BoranIslamoglu-24205.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-wTA9UZwM0kS7tSpfsBIrSnsZS-h5pjw

# Load the dataset
"""

from google.colab import drive
drive.mount('/content/drive')

# You can find the data under https://drive.google.com/drive/folders/1e550az93U3_kfRBbVY5PZnMKYwGYmHqi?usp=sharing

import pandas as pd
import numpy as np

train_data = pd.read_csv ("/content/drive/My Drive/HW1/train_data.csv")
train_label = pd.read_csv ("/content/drive/My Drive/HW1/train_label.csv")

test_data = pd.read_csv ("/content/drive/My Drive/HW1/test_data.csv")
test_label = pd.read_csv ("/content/drive/My Drive/HW1/test_label.csv")

# show random samples from the training data

p=pd.DataFrame(train_data)
p.sample(5)

"""# Train Decision Tree with default parameters"""

from sklearn.tree import DecisionTreeClassifier

# Train decision tree using the whole training data with **entropy** criteria

gcc = DecisionTreeClassifier(criterion='entropy')
gcc = gcc.fit(train_data, train_label)

# Estimate the prediction of test data
test_pred = gcc.predict(test_data)

# Calculate accuracy of test data
from sklearn.metrics import accuracy_score
TestAcc = accuracy_score(test_label,test_pred)
print("Testing Accuracy = %.5f%%" % (TestAcc * 100))

"""# FineTune Decision Tree parameters

1- Spliting dataset into train and validation
"""

# Split training data to 70% training and 30% validation
from sklearn.model_selection import train_test_split
x_train, x_val, y_train, y_val = train_test_split(train_data, train_label, test_size=0.3)

"""2- FineTune minimum sample split"""

min_samples_splits = range(2, 100)

train_results = []
val_results = []
for min_samples_split in min_samples_splits:
  
  # Fit the tree using the 70% portion of the training data
  dt = DecisionTreeClassifier(min_samples_split=min_samples_split, criterion='entropy')
  dt.fit(x_train, y_train)
  
  # Evaluate on Training set
  train_pred = dt.predict(x_train)
  train_acc = accuracy_score(y_train, train_pred)
  train_results.append(train_acc)
   
  # Evaluate on Validation set
  val_pred = dt.predict(x_val)
  val_acc = accuracy_score(y_val, val_pred)
  val_results.append(val_acc)
  
# Ploting
import matplotlib.pyplot as plt

plt.plot(min_samples_splits, train_results, 'b')
plt.plot(min_samples_splits, val_results,'r')
plt.show()

# Choose the best minimum split sample based on the plot
Best_minSampl = 82

# Train decision tree using the full training data and the best minimum split sample
newdt = DecisionTreeClassifier(min_samples_split=Best_minSampl, criterion='entropy')
newdt.fit(train_data, train_label)

# Estimate the prediction of the test data
test_pred = newdt.predict(test_data)

# Calculate accuracy of test data
TestAcc = accuracy_score(test_label,test_pred)
print("Testing Accuracy = %.5f%%" % (TestAcc * 100))

"""# Now, apply the same procedure but using KNN instead of decision tree 

# For finetuning, find the best value of K to use with this dataset.
"""

# Write your code here


from sklearn.neighbors import KNeighborsClassifier

# initialize the values of k to be a list of odd numbers between 1 and 30
kVals = range(1, 30, 2)

# Save the accuracies of each value of kVal in [accuracies] variable
# hint: you can use accuracies.append(...) function inside the loop
accuracies = []

# loop over values of k for the k-Nearest Neighbor classifier
for k in kVals:
  # Follow what we did in decision tree part
  model = KNeighborsClassifier(n_neighbors=k)
  model.fit(x_train, y_train.values.ravel())
  score = model.score(x_val, y_val)
  accuracies.append(score)

bestK = np.argmax(accuracies)

# Train KNN using the full training data with the best K that you found

newModel = KNeighborsClassifier(n_neighbors=kVals[bestK])
newModel.fit(train_data,train_label.values.ravel())
prediction = newModel.predict(test_data)
TestAccuracy = accuracy_score(test_label, prediction)
print("Testing Accuracy = %.5f%%" % (TestAccuracy * 100))

# Testing

"""# Bonus

# Apply gridsearch using decision tree on any hyperparameter(s) of your choice, you have to beat your previous obtained accuracies to get the bonus
"""

from sklearn.model_selection import GridSearchCV
grid = GridSearchCV(estimator = gcc, cv = 10, param_grid=[
  {'max_depth': [None,1,3,5,7,9], 'criterion': ['gini','entropy'], 'splitter':['random'], 'min_samples_split': range(50,90)}
 ])
grid.fit(train_data,train_label)
gprediction = grid.predict(test_data)
TestAccuracy = accuracy_score(test_label, gprediction)
print("Testing Accuracy = %.5f%%" % (TestAccuracy * 100))
print(grid.best_params_)

"""# Report: Write a summary of your approach to this problem; this should be like an abstract of a paper or the executive summary (you aim for clarity and passing on information, not going to details about known facts such as what decision trees are, assuming they are known to people in your research area).

Must include statements such as:


*   Include the problem definition: 1-2 lines
*   Talk about train/val/test sets, size and how split.
*   State what your test results are with the chosen method, parameters: e.g. "We have obtained the best results with the ….. classifier (parameters=....) , giving classification accuracy of …% on test data…."
*   Comment on the speed of the algorithms and anything else that you deem important/interesting (e.g. confusion matrix)

# Write your report in this cell

..Our dataset(German Credit Data) classifies people as good or bad credit risks according to 20 specified attirbutes. Our aim for this project is developing a decision tree ML model and a kNN ML model to classify people as good or bad credit risks.

..Train_data is splitted into %70 training data and %30 validation data. We also have a separate test data.

..For decision tree model, we have obtained 66.18357% with our training data.
After we fine-tuned our hyper-parameters (min_samples_split = 82), we have obtained 71.49758% accuracy.

..For kNN model, we found the bestK in the odd numbers between 1-30 and used that hyper-parameter to achieve the best accuracy. Our best accuracy for kNN model is 70.04831%

..To get better accuracies, we used gridsearch to fine-tune more attirbutes. Eventually, we got a better testing accuracy with these hyperparameters.
Testing Accuracy = 73.91304%
{'criterion': 'entropy', 
'max_depth': None, 
'min_samples_split': 54, 
'splitter': 'random'}
"""