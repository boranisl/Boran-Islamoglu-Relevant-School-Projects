# -*- coding: utf-8 -*-
"""NeuralNetworkExample.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16LOG1G9M7vwM9x8wG6bcxwcr5r1yBegP
"""

import tensorflow as tf

mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test,y_test) = mnist.load_data()

x_train = tf.keras.utils.normalize(x_train, axis=1)
x_test= tf.keras.utils.normalize(x_test, axis=1)

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(512, activation= tf.nn.relu))
model.add(tf.keras.layers.Dense(512, activation= tf.nn.relu))
model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))

model.compile(optimizer='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics=['accuracy'])

#Initializations
epochCount = 1
VAL_LOSS = 1
NO_OF_ITERATIONS = 0

#Enter the Target_Error_Rate and Batch_Size
TARGET_ERROR_RATE = 0.09
BATCH_SIZE = 100

while  VAL_LOSS > TARGET_ERROR_RATE:
  model.fit(x_train, y_train, epochs =1, batch_size=BATCH_SIZE)
  val_loss, val_acc = model.evaluate(x_test, y_test)
  VAL_LOSS = val_loss
  print("Loss= " + str(val_loss))
  print("Test Accuracy= " + str(val_acc))
  Iterations = (60000/BATCH_SIZE) * epochCount
  print("Number of Iterations = " + str(Iterations))
  epochCount = epochCount+1

