%x COMMENT
  int lineNumber = 1;

%%

"//"	 BEGIN(COMMENT);
<COMMENT>.  
<COMMENT>\n { lineNumber++; BEGIN(INITIAL); }
\n lineNumber++;

int     printf("%d tINT\n", lineNumber);
real	printf("%d tREAL\n",lineNumber);
if     printf("%d tIF\n", lineNumber);
endif     printf("%d tENDIF\n",lineNumber);
vector     printf("%d tVECTOR\n",lineNumber);
matrix     printf("%d tMATRIX\n", lineNumber);
transpose     printf("%d tTRANSPOSE\n", lineNumber);

" "     printf("");
","     printf("%d tCOMMA\n", lineNumber);
"("     printf("%d tLPAR\n", lineNumber);
"="     printf("%d tASSIGNM\n", lineNumber);
"+"     printf("%d tPLUS\n", lineNumber);
"*"     printf("%d tSTAR\n", lineNumber);
"=="     printf("%d tEQUL\n", lineNumber);
"<"     printf("%d tLT\n", lineNumber);
">"     printf("%d tGT\n", lineNumber);
"["     printf("%d tLBRAC\n", lineNumber);
"&&"     printf("%d tAND\n", lineNumber);
".*"     printf("%d tDOTPROD\n", lineNumber);
")"     printf("%d tRPAR\n", lineNumber);
"-"     printf("%d tMINUS\n", lineNumber);
"/"     printf("%d tDIV\n", lineNumber);
";"     printf("%d tSEMI\n", lineNumber);
"!="     printf("%d tINEQ\n", lineNumber);
"<="     printf("%d tLE\n", lineNumber);
">="     printf("%d tGE\n", lineNumber);
"]"     printf("%d tRBRAC\n", lineNumber);
"||"     printf("%d tOR\n", lineNumber);

[a-zA-Z][a-zA-Z0-9_]*     printf("%d tIDENT (%s)\n", lineNumber,yytext);
[0-9]+          { printf("%d tPOSINT (%s) ", lineNumber,yytext); function1(yytext); }
[0-9]+"E"[0-9]+ { printf("%d tPOSINT (%s) ", lineNumber,yytext); function1(yytext); }
"-"[0-9]+       { printf("%d tNEGINT (%s) ", lineNumber,yytext); function1(yytext); }
"-"[0-9]+"E"[0-9]+       { printf("%d tNEGINT (%s) ", lineNumber,yytext); function1(yytext); } 
[0-9]+"."[0-9]+ { printf("%d tPOSREAL (%s) ", lineNumber,yytext); function1(yytext); }  
[0-9]+"."[0-9]+"E"[0-9]+  { printf("%d tPOSREAL (%s) ", lineNumber,yytext); function1(yytext); }  
[0-9]+"."[0-9]+"E-"[0-9]+  { printf("%d tPOSREAL (%s) ", lineNumber,yytext); function1(yytext); } 
"-"[0-9]+"."[0-9]+ { printf("%d tNEGREAL (%s) ", lineNumber,yytext); function1(yytext); }
"-"[0-9]+"."[0-9]+"E"[0-9]+  { printf("%d tNEGREAL (%s) ", lineNumber,yytext); function1(yytext); } 
"-"[0-9]+"."[0-9]+"E-"[0-9]+ { printf("%d tNEGREAL (%s) ", lineNumber,yytext); function1(yytext); }  
%%
#include<stdio.h>
#include<string.h>
void function1(char *c)
{
char *a = c; 
char *m = c;
int i=0;
int b1 = 0;
int b3 = 0;
int count = 0;
int enddot = 0;
int j = 0;
int boolfordot = 0;
int boolforE = 0;
int b2 = 0;
int dot = 0;
printf("(");
while(m[j] != '\0')
{
if(m[j] == '.')
{
boolfordot = 1;
dot = j;
}
if(m[j] == 'E')
{
boolforE = 1;
printf("E");
}
if(boolfordot == 0 && boolforE == 0)
{
if((m[j] == '0'|| m[j] == '-') && b1 == 0)
{
if(m[j] == '-')
{
printf("-");
}
if(m[j+1] == '.')
{
printf("0");
}
}
else
{
b1 = 1;
printf("%c", m[j]);
}
}

if(boolfordot == 1 && boolforE == 0)
{
if(m[j+1] == 'E' || m[j+1] == '\0')
{
enddot = j;
b2 = 1;
}
if(b2 == 1)
{
while(m[enddot] == '0')
{
enddot--;
}
while(dot <= enddot)
{
printf("%c", m[dot]);
dot++;
}
}
}

if(boolforE == 1)
{
if((m[j] == '0'|| m[j] == '-' || m[j] == 'E') && b3 == 0)
{
if(m[j] == '-')
{
printf("-");
}
}
else
{
b3 = 1;
printf("%c", m[j]);
}
}

j++;
}

printf(")\n");
}

int main()
{
	yylex();

}
